Index: src/main/java/org/example/insurancemanagementapplication/Utility/InputValidator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/insurancemanagementapplication/Utility/InputValidator.java b/src/main/java/org/example/insurancemanagementapplication/Utility/InputValidator.java
--- a/src/main/java/org/example/insurancemanagementapplication/Utility/InputValidator.java	
+++ b/src/main/java/org/example/insurancemanagementapplication/Utility/InputValidator.java	(date 1714641833092)
@@ -1,12 +1,9 @@
 package org.example.insurancemanagementapplication.Utility;
 
-import Entity.InsuranceManager;
-import Entity.InsuranceSurveyor;
 import jakarta.persistence.EntityManager;
 import org.example.insurancemanagementapplication.Interfaces.CustomerAnalytics;
 import org.example.insurancemanagementapplication.Interfaces.EmployeeAnalytics;
 
-import java.util.ArrayList;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -72,7 +69,7 @@
         return true;
     }
 
-    // if user input the same fullName, password, email, phoneNumber, address => they might accidentally input twice => user already exist
+
     public static boolean checkIfPolicyOwnerAlreadyExist(EntityManager entityManager, String fullName, String email, String password, String phoneNumber, String address) {
         if ((CustomerAnalytics.getPolicyOwnerByCredential(entityManager, fullName, email, password, phoneNumber, address)) != null) {
             return true;
@@ -115,54 +112,8 @@
         return false;
     }
 
-    public static boolean validateBankingInfo(EntityManager entityManager, String bankName, String bankAccountName, String bankAccountNumber) {
-        String message = "";
-        if (validateNonEmptyString(bankName) == false) {
-            return false;
-        }
-        if (validateNonEmptyString(bankAccountName) == false) {
-            return false;
-        }
-        if (validateNonEmptyString(bankAccountNumber) == false) {
-            return false;
-        } else {
-            return true;
-        }
-    }
-
-    public static String ClaimCreateValidator(EntityManager entityManager, String bankName, String accountName, String accountNumber) {
-        String message = "";
-        if (validateBankingInfo(entityManager, bankName, accountName, accountNumber) == false) {
-            return message = "Invalid Banking Information, no fields should be empty";
-        } return  message = "Success";
-
-    }
-//ClaimUpdateValidator: overloading methods
-
-
-    //ClaimUpdateValidator for Insurance Manager
-    public static String ClaimUpdateValidator(EntityManager entityManager, int claimAmount, String bankName, String accountName, String accountNumber, InsuranceManager insuranceManager, String insuranceSurveyorId) {
-        String message = "";
-        if (validateClaimAmount(claimAmount) == false) {
-            return message = "Invalid Claim Amount, must be a positive integer";
-        }
-        if (validateNonEmptyString(String.valueOf(claimAmount)) == false) {
-            return message = "Invalid Claim Amount, must not be empty";
-        }
-        if (validateBankingInfo(entityManager, bankName, accountName, accountNumber) == false) {
-            return message = "Invalid Banking Information, no fields should be empty";
-        }
-
-        if (checkIfAnInsuranceSurveyorBelongsToAnInsuranceManager(entityManager, insuranceManager, insuranceSurveyorId) == true) {
 
-        } else {
-            return message = "Success";
-        }
-        return message;
-    }
-
-    //ClaimUpdateValidator for Insurance Surveyor
-    public static String ClaimUpdateValidator(EntityManager entityManager, String bankName, String accountName, String accountNumber,) {
+    public static String validatingClaim(EntityManager entityManager, int claimAmount, String bankName, String accountName, String accountNumber) {
         String message = "";
         if (validateClaimAmount(claimAmount) == false) {
             return message = "Invalid Claim Amount, must be a positive integer";
@@ -170,16 +121,18 @@
         if (validateNonEmptyString(String.valueOf(claimAmount)) == false) {
             return message = "Invalid Claim Amount, must not be empty";
         }
-        if (validateBankingInfo(entityManager, bankName, accountName, accountNumber) == false) {
-            return message = "Invalid Banking Information, no fields should be empty";
-        }
-
-        if (checkIfAnInsuranceSurveyorBelongsToAnInsuranceManager(entityManager, insuranceManager, insuranceSurveyorId) == true) {
 
+        if (validateNonEmptyString(bankName) == false) {
+            return message = "Invalid Bank Name, must not be empty";
+        }
+        if (validateNonEmptyString(accountName) == false) {
+            return message = "Invalid Bank Account Name, must not be empty";
+        }
+        if (validateNonEmptyString(accountNumber) == false) {
+            return message = "Invalid Bank Account Number, must not be empty";
         } else {
             return message = "Success";
         }
-        return message;
     }
 
     public static String validatingUser(String role, EntityManager entityManager, String fullName, String email, String password, String phoneNumber, String address) {
@@ -241,22 +194,5 @@
         }
         return message = "Success";
 
-    }
-
-    public static boolean checkIfAnInsuranceSurveyorBelongsToAnInsuranceManager(EntityManager entityManager, InsuranceManager insuranceManager, String targetInsuranceSurveyorId) {
-        boolean insuranceSurveyorExist = false;
-        String insuranceSurveyorId = "";
-        ArrayList<InsuranceSurveyor> surveyors = (ArrayList<InsuranceSurveyor>) insuranceManager.getListOfSurveyors();
-
-        // Loop through the list of surveyors
-        for (InsuranceSurveyor surveyor : surveyors) {
-            insuranceSurveyorId = surveyor.getId();
-
-            if (insuranceSurveyorId.equals(targetInsuranceSurveyorId)) {
-                insuranceSurveyorExist = true;
-                break; // Exit the loop since we found the surveyor ID
-            }
-        }
-        return insuranceSurveyorExist;
     }
 }
